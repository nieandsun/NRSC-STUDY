<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.9.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.nrsc</groupId>
    <artifactId>nrsc-unit-test-study</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>nrsc-unit-test-study</name>
    <description>nrsc-unit-test-study</description>


    <properties>
        <druid.version>1.2.19</druid.version>
        <junit.version>4.13.2</junit.version>
        <powermock.version>2.0.0</powermock.version>
        <mockito.version>2.23.4</mockito.version>
        <assertj.version>3.11.1</assertj.version>
        <jacoco.version>0.8.7</jacoco.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.4.1</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid.version}</version>
        </dependency>


        <!--powermock开始-->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito2</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>

        <!--spring-boot-starter-test集成了junit和mockito-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--spring-boot-starter-test集成了junit、mockito和assertj-->
        <!-- junit-->
        <!--
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>
        -->
        <!--mockito-->
        <!--
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        -->
        <!--assertj-->
        <!--
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.version}</version>
            <scope>compile</scope>
        </dependency>
        -->

        <dependency>
            <groupId>org.jacoco</groupId>
            <artifactId>org.jacoco.agent</artifactId>
            <version>${jacoco.version}</version>
            <classifier>runtime</classifier>
            <scope>test</scope>
        </dependency>


    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <configuration>
                    <!--skip: 设置为 false，表示不跳过 JaCoCo 的执行-->
                    <skip>false</skip>
                    <!--指定存储覆盖率数据的 .exec 文件位置-->
                    <dataFile>${project.basedir}/jacoco.exec</dataFile>
                    <!--指定生成的覆盖率数据文件的位置，通常存储在构建目录中-->
                    <destFile>${project.build.directory}/jacoco.exec</destFile>
                    <!--指定生成的报告输出目录的位置-->
                    <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
                    <!--指定用于存储字节码类的目录-->
                    <classDumpDir>${project.build.outputDirectory}</classDumpDir>
                    <!--如果设置为 true，则在收集数据时将覆盖率数据追加到文件中，而不是覆盖。-->
                    <append>true</append>

                    <!--设置不进行代码覆盖率统计的代码，可以采用正则-->
                    <excludes>
                        <exclude>com/nrsc/unit/test/study/util/SpringContextUtil.class</exclude>
                        <exclude>com/nrsc/unit/test/study/*.class</exclude>
                        <exclude>com/**/*/AccountWalletRPCService.class</exclude>
                        <exclude>com/nrsc/unit/test/study/dto/**/*/</exclude>
                    </excludes>

                </configuration>
                <executions>
                    <!--会出现 Please supply original non-instrumented classes.-->
                    <!--
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    -->
                    <!--在 test 阶段之前执行，插桩代码以收集覆盖率数据-->
                    <execution>
                        <id>default-instrument</id>
                        <goals>
                            <goal>instrument</goal>
                        </goals>
                    </execution>

                    <!--在 test 阶段后执行，恢复原始字节码-->
                    <execution>
                        <phase>test</phase>
                        <id>default-restore-instrumented-classes</id>
                        <goals>
                            <goal>restore-instrumented-classes</goal>
                        </goals>
                    </execution>

                    <!--report：在 test 阶段执行，生成覆盖率报告。-->
                    <execution>
                        <phase>test</phase>
                        <id>jacoco-report</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>